theory P1 
begin

builtins: signing

// Set up symmetric keys
rule SetupSymmetricKey:
  [ Fr(~k) ] --[ InitKey() ]-> [ !Ltk($A, $B, ~k) ]

rule Reveal_ltk:
  [ !Ltk(A, B, k) ] --[ Reveal(A), Reveal(B) ]-> [ Out(k) ]

/*
  We model the following protocol

  1. A -> B: x
  2. A <- B: {x}_{k(B,A)}
 */

rule Init_A:
  [ Fr(~id)
  , !Ltk(I, R, ltkIR)
  , !Ltk(R, I, ltkRI)
  ]
--[ Init_A()
  , Create_A(I, ~id) 
  ]->
  [ St_A_1(I, ~id, R, ltkIR, ltkRI)
  ]

rule Init_B:
  [ Fr(~id)
  , !Ltk(I, R, ltkIR)
  , !Ltk(R, I, ltkRI)
  ]
--[ Init_B()
  , Create_B(R, ~id)
  ]->
  [ St_B_1(R, ~id, I, ltkIR, ltkRI)
  ]


// 1. A -> B: x

rule I_1:
  [ St_A_1(I, id, R, ltkIR, ltkRI)
  , Fr(~x)
  ]
--[ Send(I,~x)
  , Running(I,R,<'R','I',~x>) 
  ]->
  [ St_A_2(I, id, R, ltkIR, ltkRI, ~x)
  , Out(~x)
  ]

rule R_1:
  [ St_B_1(R, id, I, ltkIR, ltkRI)
  , In(x)
  ]
--[ Receive(R,x)
  , Running(R,I,<'I','R',x>)
  , Commit(R,I,<'R','I',x>)
  , Honest(R)
  ]->
  [ St_B_2(R, id, I, ltkIR, ltkRI, x)
  ]

// 2. A <- B: {x}_{k(B,A)}

rule R_2:
  let m = sign(x, ltkRI)
  in [ St_B_2(R, id, I, ltkIR, ltkRI, x)
  ]
--[ Send(R, m)
  , FinishR()
  ]->
  [ St_B_3(R, id, I, ltkIR, ltkRI, x)
  , Out(m)
  ]

rule I_2:
  let m = sign(x, ltkRI)
  in
  [ St_A_2(I, id, R, ltkIR, ltkRI, x)
  , In(m)
  ]
--[ Receive(I, m)
  , Commit(I,R,<'I','R',x>) 
  , FinishI()
  , Honest(I)
  ]->
  [ St_A_3(I, id, R, ltkIR, ltkRI, x) 
  ]


// Own lemma
lemma executable: // verified
  exists-trace
    "Ex #i #j. FinishI()@i & FinishR()@j 
   & not (Ex A #j. Reveal(A)@j)
   & (All #j1 #j2 #j3. InitKey()@j1 & InitKey()@j2 & InitKey()@j3 
          ==> #j1 = #j2 | #j1 = #j3 | #j2 = #j3) 
   & (All #j1 #j2. Init_A()@j1 & Init_A()@j2 ==> #j1 = #j2)
   & (All #j1 #j2. Init_B()@j1 & Init_B()@j2 ==> #j1 = #j2)
   & (Ex A B idA idB #i #j. Create_A(A,idA)@i & Create_B(B,idB)@j & not A=B)
   "

// Ensure attacker can act as R
lemma attacker_can_be_R: // verified
  exists-trace
    "Ex #i. FinishI()@i
   & not (Ex #i. Init_B()@i)"

// Ensure attacker can act as I
lemma attacker_can_be_I: // verified
  exists-trace
    "Ex #i. FinishR()@i
   & not (Ex #i. Init_A()@i)"

// Given, immutable lemmas
/* 
lemma secrecy: // non-applicable
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma secrecy_PFS: // non-applicable
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i & r < i)"
*/

lemma noninjectiveagreementINITIATOR: // verified
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementINITIATOR: // verified
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j 
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"


lemma noninjectiveagreementRESPONDER: // disproven
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementRESPONDER: // disproven
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j 
              & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2
                                 & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

end
