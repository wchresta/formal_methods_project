theory P4 begin

// Function signature and definition of the equational theory E

functions: fst/1, h/1, kdf/3, mac/2, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) SetupSymmetricKey:
   [ Fr( ~k ) ] --[ InitKey( ) ]-> [ !Ltk( $A, $B, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, B, k ) ] --[ Reveal( A ), Reveal( B ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_A:
   [ Fr( ~id ), !Ltk( I, R, kIR ) ]
  --[ Init_A( ), Create_I( I, ~id ) ]->
   [ St_I_1( I, ~id, R, kIR ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_B:
   [ Fr( ~id ), !Ltk( I, R, kIR ) ]
  --[ Init_B( ), Create_R( R, ~id ) ]->
   [ St_R_1( R, ~id, I, kIR ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_1:
   [ St_I_1( I, id, R, kIR ), Fr( ~x ), Fr( ~s ) ]
  --[ Send( I, <~x, senc(~s, h(kIR))> ) ]->
   [ St_I_2( I, id, R, kIR, ~x, ~s ), Out( <~x, senc(~s, h(kIR))> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_1:
   [ St_R_1( R, id, I, kIR ), In( <x, m> ) ]
  --[ Receive( R, <x, m> ) ]->
   [ St_R_2( R, id, I, kIR, x, sdec(m, h(kIR)) ) ]

  /*
  rule (modulo AC) R_1:
     [ St_R_1( R, id, I, kIR ), In( <x, m> ) ]
    --[ Receive( R, <x, m> ) ]->
     [ St_R_2( R, id, I, kIR, x, z ) ]
    variants (modulo AC)
    1. kIR   = kIR.8
       m     = m.8
       z     = sdec(m.8, h(kIR.8))
    
    2. kIR   = x.8
       m     = senc(x.9, h(x.8))
       z     = x.9
  */

rule (modulo E) R_2:
   [ St_R_2( R, id, I, kIR, x, s ), Fr( ~y ) ]
  --[
  Send( R, ~y ), Running( R, I, <'I', 'R', x, ~y, kdf(s, x, ~y)> )
  ]->
   [ St_R_3( R, id, I, kIR, x, s, ~y ), Out( ~y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_2:
   [ St_I_2( I, id, R, kIR, x, s ), In( y ) ]
  --[
  Receive( I, y ), Running( I, R, <'R', 'I', x, y, kdf(s, x, y)> )
  ]->
   [ St_I_3( I, id, R, kIR, x, s, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_3:
   [ St_I_3( I, id, R, kIR, x, s, y ) ]
  --[ Send( I, mac(<'I', y>, kdf(s, x, y)) ) ]->
   [
   St_I_4( I, id, R, kIR, x, s, y, kdf(s, x, y) ),
   Out( mac(<'I', y>, kdf(s, x, y)) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_3:
   [
   St_R_3( R, id, I, kIR, x, s, y ), In( mac(<'I', y>, kdf(s, x, y)) )
   ]
  --[ Receive( R, mac(<'I', y>, kdf(s, x, y)) ) ]->
   [ St_R_4( R, id, I, kIR, x, s, y, kdf(s, x, y) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_4:
   [ St_R_4( R, id, I, kIR, x, s, y, sIR ) ]
  --[
  Send( R, mac(<'R', x>, sIR) ),
  Commit( R, I, <'R', 'I', x, y, sIR> ), Secret( R, sIR ),
  FinishR( ), Honest( I ), Honest( R )
  ]->
   [ St_R_5( R, id, I, kIR, x, s, y, sIR ), Out( mac(<'R', x>, sIR) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_4:
   [ St_I_4( I, id, R, kIR, x, s, y, sIR ), In( mac(<'R', x>, sIR) ) ]
  --[
  Receive( I, mac(<'R', x>, sIR) ),
  Commit( I, R, <'I', 'R', x, y, sIR> ), Secret( I, sIR ),
  FinishI( ), Honest( I ), Honest( R )
  ]->
   [ St_I_5( I, id, R, kIR, x, s, y, sIR ) ]

  /* has exactly the trivial AC variant */

lemma executable:
  exists-trace
  "∃ #i #j.
    ((((((FinishI( ) @ #i) ∧ (FinishR( ) @ #j)) ∧
        (¬(∃ A #j.1. Reveal( A ) @ #j.1))) ∧
       (∀ #j1 #j2.
         ((InitKey( ) @ #j1) ∧ (InitKey( ) @ #j2)) ⇒ (#j1 = #j2))) ∧
      (∀ #j1 #j2.
        ((Init_A( ) @ #j1) ∧ (Init_A( ) @ #j2)) ⇒ (#j1 = #j2))) ∧
     (∀ #j1 #j2.
       ((Init_B( ) @ #j1) ∧ (Init_B( ) @ #j2)) ⇒ (#j1 = #j2))) ∧
    (∃ A B idA idB #i.1 #j.1.
      ((Create_I( A, idA ) @ #i.1) ∧ (Create_R( B, idB ) @ #j.1)) ∧
      (¬(A = B)))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j.
  (FinishI( ) @ #i) ∧ (FinishR( ) @ #j)
 ∧
  (∀ A #j.1. (Reveal( A ) @ #j.1) ⇒ ⊥) ∧
  (∀ #j1 #j2. (InitKey( ) @ #j1) ∧ (InitKey( ) @ #j2) ⇒ #j1 = #j2) ∧
  (∀ #j1 #j2. (Init_A( ) @ #j1) ∧ (Init_A( ) @ #j2) ⇒ #j1 = #j2) ∧
  (∀ #j1 #j2. (Init_B( ) @ #j1) ∧ (Init_B( ) @ #j2) ⇒ #j1 = #j2) ∧
  (∃ A B idA idB #i.1 #j.1.
    (Create_I( A, idA ) @ #i.1) ∧ (Create_R( B, idB ) @ #j.1)
   ∧
    ¬(A = B))"
*/
simplify
solve( St_I_4( I, id, R, kIR, x, s, y, sIR ) ▶₀ #i )
  case I_3
  solve( St_R_4( R, id.1, I, kIR, x.1, s.1, y.1, sIR ) ▶₀ #j )
    case R_3
    solve( splitEqs(4) )
      case split_case_1
      solve( !KU( mac(<'R', ~x>, kdf(~s, ~x, y)) ) @ #vk )
        case R_4
        solve( !KU( ~x ) @ #vk.4 )
          case I_1
          solve( !KU( ~y ) @ #vk.2 )
            case R_2
            solve( !KU( mac(<'I', ~y>, kdf(~s, ~x, ~y)) ) @ #vk.4 )
              case I_3
              solve( !KU( senc(~s, h(~k)) ) @ #vk.5 )
                case I_1
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Secret( A, x ) @ #i )
  case I_4
  solve( St_I_4( A, id, R, kIR, x, s, y, x.1 ) ▶₀ #i )
    case I_3
    solve( !KU( kdf(~s, ~x, y) ) @ #vk )
      case c_kdf
      solve( !KU( ~s ) @ #vk.3 )
        case I_1
        solve( !KU( ~k ) @ #vk.6 )
          case Reveal_ltk
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case R_4
  solve( St_R_4( A, id, I, kIR, x, s, y, x.1 ) ▶₀ #i )
    case R_3
    solve( splitEqs(1) )
      case split_case_1
      solve( !KU( kdf(sdec(m, h(~k)), x, ~y) ) @ #vk )
        case c_kdf
        solve( !KU( sdec(m, h(~k)) ) @ #vk.5 )
          case c_sdec
          solve( !KU( h(~k) ) @ #vk.7 )
            case c_h
            solve( !KU( ~k ) @ #vk.8 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case split_case_2
      solve( !KU( kdf(s, x, ~y) ) @ #vk )
        case c_kdf
        solve( !KU( mac(<'I', ~y>, kdf(s, x, ~y)) ) @ #vk.1 )
          case I_3
          solve( !KU( ~s ) @ #vk.5 )
            case I_1
            solve( !KU( ~k.1 ) @ #vk.8 )
              case Reveal_ltk
              solve( !KU( senc(~s, h(~k)) ) @ #vk.7 )
                case I_1
                by contradiction /* from formulas */
              next
                case c_senc
                solve( !KU( h(~k) ) @ #vk.9 )
                  case c_h
                  solve( !KU( ~k ) @ #vk.10 )
                    case Reveal_ltk
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case c_mac
          solve( !KU( senc(s, h(~k)) ) @ #vk.4 )
            case I_1
            solve( !KU( ~s ) @ #vk.5 )
              case I_1
              solve( !KU( ~k ) @ #vk.10 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_senc
            solve( !KU( h(~k) ) @ #vk.9 )
              case c_h
              solve( !KU( ~k ) @ #vk.10 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy_PFS:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. ((Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)) ∧ (#r < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ¬(#r < #i))"
*/
simplify
solve( Secret( A, x ) @ #i )
  case I_4
  solve( St_I_4( A, id, R, kIR, x, s, y, x.1 ) ▶₀ #i )
    case I_3
    solve( !KU( kdf(~s, ~x, y) ) @ #vk )
      case c_kdf
      solve( !KU( ~s ) @ #vk.3 )
        case I_1
        solve( !KU( ~k ) @ #vk.6 )
          case Reveal_ltk
          solve( !KU( mac(<'R', ~x>, kdf(~s, ~x, y)) ) @ #vk.4 )
            case R_4
            solve( !KU( senc(~s, h(~k.1)) ) @ #vk.9 )
              case I_1
              solve( !KU( ~x ) @ #vk.8 )
                case I_1
                solve( !KU( ~y ) @ #vk.8 )
                  case R_2
                  solve( !KU( mac(<'I', ~y>, kdf(~s, ~x, ~y)) ) @ #vk.9 )
                    case I_3
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4
  solve( St_I_4( a, id, b, kIR, x, s, y, sIR ) ▶₀ #i )
    case I_3
    solve( !KU( mac(<'R', ~x>, kdf(~s, ~x, y)) ) @ #vk )
      case R_4
      solve( !KU( senc(~s, h(~k.1)) ) @ #vk.5 )
        case I_1
        by contradiction /* from formulas */
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.6 )
          case I_1
          solve( !KU( ~k ) @ #vk.9 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( kdf(~s, ~x, y) ) @ #vk.3 )
        case c_kdf
        solve( !KU( ~s ) @ #vk.6 )
          case I_1
          solve( !KU( ~k ) @ #vk.8 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'I', 'R', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4
  solve( St_I_4( a, id, b, kIR, x, s, y, sIR ) ▶₀ #i )
    case I_3
    solve( !KU( mac(<'R', ~x>, kdf(~s, ~x, y)) ) @ #vk )
      case R_4
      solve( !KU( senc(~s, h(~k.1)) ) @ #vk.5 )
        case I_1
        solve( (#i2 < #i)  ∥ (#i < #i2) )
          case case_1
          solve( Commit( a2, b2, <'I', 'R', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case I_4
            solve( St_I_4( a2, id.1, b2, kIR, ~x, s.1, ~y, kdf(~s, ~x, ~y)
                   ) ▶₀ #i2 )
              case I_3
              by contradiction /* cyclic */
            qed
          qed
        next
          case case_2
          solve( Commit( a2, b2, <'I', 'R', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case I_4
            solve( St_I_4( a2, id.1, b2, kIR, ~x, s.1, ~y, kdf(~s, ~x, ~y)
                   ) ▶₀ #i2 )
              case I_3
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.6 )
          case I_1
          solve( !KU( ~k ) @ #vk.9 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( kdf(~s, ~x, y) ) @ #vk.3 )
        case c_kdf
        solve( !KU( ~s ) @ #vk.6 )
          case I_1
          solve( !KU( ~k ) @ #vk.8 )
            case Reveal_ltk
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'R', 'I', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'R', 'I', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_4
  solve( St_R_4( a, id, b, kIR, x, s, y, sIR ) ▶₀ #i )
    case R_3
    solve( splitEqs(1) )
      case split_case_1
      solve( !KU( mac(<'I', ~y>, kdf(sdec(m, h(~k)), x, ~y)) ) @ #vk )
        case c_mac
        solve( !KU( kdf(sdec(m, h(~k)), x, ~y) ) @ #vk.5 )
          case c_kdf
          solve( !KU( sdec(m, h(~k)) ) @ #vk.8 )
            case c_sdec
            solve( !KU( h(~k) ) @ #vk.9 )
              case c_h
              solve( !KU( ~k ) @ #vk.10 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case split_case_2
      solve( !KU( mac(<'I', ~y>, kdf(s, x, ~y)) ) @ #vk )
        case I_3
        solve( !KU( senc(~s, h(~k)) ) @ #vk.3 )
          case I_1
          by contradiction /* from formulas */
        next
          case c_senc
          solve( !KU( ~s ) @ #vk.5 )
            case I_1
            solve( !KU( ~k.1 ) @ #vk.8 )
              case Reveal_ltk
              solve( !KU( h(~k) ) @ #vk.8 )
                case c_h
                solve( !KU( ~k ) @ #vk.9 )
                  case Reveal_ltk
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case c_mac
        solve( !KU( kdf(s, x, ~y) ) @ #vk.5 )
          case c_kdf
          solve( !KU( senc(s, h(~k)) ) @ #vk.4 )
            case I_1
            solve( !KU( ~s ) @ #vk.8 )
              case I_1
              solve( !KU( ~k ) @ #vk.10 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_senc
            solve( !KU( h(~k) ) @ #vk.9 )
              case c_h
              solve( !KU( ~k ) @ #vk.10 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'R', 'I', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_4
  solve( St_R_4( a, id, b, kIR, x, s, y, sIR ) ▶₀ #i )
    case R_3
    solve( splitEqs(1) )
      case split_case_1
      solve( !KU( mac(<'I', ~y>, kdf(sdec(m, h(~k)), x, ~y)) ) @ #vk )
        case c_mac
        solve( !KU( kdf(sdec(m, h(~k)), x, ~y) ) @ #vk.5 )
          case c_kdf
          solve( !KU( sdec(m, h(~k)) ) @ #vk.8 )
            case c_sdec
            solve( !KU( h(~k) ) @ #vk.9 )
              case c_h
              solve( !KU( ~k ) @ #vk.10 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case split_case_2
      solve( !KU( mac(<'I', ~y>, kdf(s, x, ~y)) ) @ #vk )
        case I_3
        solve( !KU( senc(~s, h(~k)) ) @ #vk.3 )
          case I_1
          solve( (#i2 < #i)  ∥ (#i < #i2) )
            case case_1
            solve( Commit( a2, b2, <'R', 'I', ~x, ~y, kdf(~s, ~x, ~y)>
                   ) @ #i2 )
              case R_4
              solve( St_R_4( a2, id.1, b2, kIR, ~x, s.1, ~y, kdf(~s, ~x, ~y)
                     ) ▶₀ #i2 )
                case R_3
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( Commit( a2, b2, <'R', 'I', ~x, ~y, kdf(~s, ~x, ~y)>
                   ) @ #i2 )
              case R_4
              solve( St_R_4( a2, id.1, b2, kIR, ~x, s.1, ~y, kdf(~s, ~x, ~y)
                     ) ▶₀ #i2 )
                case R_3
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( ~s ) @ #vk.5 )
            case I_1
            solve( !KU( ~k.1 ) @ #vk.8 )
              case Reveal_ltk
              solve( !KU( h(~k) ) @ #vk.8 )
                case c_h
                solve( !KU( ~k ) @ #vk.9 )
                  case Reveal_ltk
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case c_mac
        solve( !KU( kdf(s, x, ~y) ) @ #vk.5 )
          case c_kdf
          solve( !KU( senc(s, h(~k)) ) @ #vk.4 )
            case I_1
            solve( !KU( ~s ) @ #vk.8 )
              case I_1
              solve( !KU( ~k ) @ #vk.10 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_senc
            solve( !KU( h(~k) ) @ #vk.9 )
              case c_h
              solve( !KU( ~k ) @ #vk.10 )
                case Reveal_ltk
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end