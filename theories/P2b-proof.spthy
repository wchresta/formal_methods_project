theory P2b begin

// Function signature and definition of the equational theory E

functions: fst/1, mac/2, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

rule (modulo E) SetupSymmetricKey:
   [ Fr( ~k ) ]
  --[ InitKey( ), KeyPair( $A, $B ) ]->
   [ !Ltk( $A, $B, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, B, k ) ] --[ Reveal( A ), Reveal( B ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_I:
   [ Fr( ~id ), !Ltk( I, R, kIR ), !Ltk( R, I, kRI ) ]
  --[ Init_I( ), Create_I( I, ~id ) ]->
   [ St_I_1( I, ~id, R, kIR, kRI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_R:
   [ Fr( ~id ), !Ltk( I, R, kIR ), !Ltk( R, I, kRI ) ]
  --[ Init_R( ), Create_R( R, ~id ) ]->
   [ St_R_1( R, ~id, I, kIR, kRI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_1:
   [ St_I_1( I, id, R, kIR, kRI ), Fr( ~x ) ]
  --[ Send( I, ~x ) ]->
   [ St_I_2( I, id, R, kIR, kRI, ~x ), Out( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_1:
   [ St_R_1( R, id, I, kIR, kRI ), In( x ) ]
  --[ Receive( R, x ) ]->
   [ St_R_2( R, id, I, kIR, kRI, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_2:
   [ St_R_2( R, id, I, kIR, kRI, x ), Fr( ~y ) ]
  --[ Send( R, ~y ), Running( R, I, <'I', 'R', x, ~y> ) ]->
   [ St_R_3( R, id, I, kIR, kRI, x, ~y ), Out( ~y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_2:
   [ St_I_2( I, id, R, kIR, kRI, x ), In( y ) ]
  --[ Receive( I, y ), Running( I, R, <'R', 'I', x, y> ) ]->
   [ St_I_3( I, id, R, kIR, kRI, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_3:
   [ St_I_3( I, id, R, kIR, kRI, x, y ) ]
  --[ Send( I, mac(<'I', x, y>, kIR) ) ]->
   [ St_I_4( I, id, R, kIR, kRI, x, y ), Out( mac(<'I', x, y>, kIR) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_3:
   [ St_R_3( R, id, I, kIR, kRI, x, y ), In( mac(<'I', x, y>, kIR) ) ]
  --[ Receive( R, mac(<'I', x, y>, kIR) ) ]->
   [ St_R_4( R, id, I, kIR, kRI, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_4:
   [ St_R_4( R, id, I, kIR, kRI, x, y ) ]
  --[
  Send( R, mac(<'R', x, y>, kRI) ), Commit( R, I, <'R', 'I', x, y> ),
  Honest( I ), Honest( R ), FinishR( )
  ]->
   [ St_R_5( R, id, I, kIR, kIR, x, y ), Out( mac(<'R', x, y>, kRI) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_4:
   [ St_I_4( I, id, R, kIR, kRI, x, y ), In( mac(<'R', x, y>, kRI) ) ]
  --[
  Receive( I, mac(<'R', x, y>, kRI) ),
  Commit( I, R, <'I', 'R', x, y> ), Honest( I ), Honest( R ),
  FinishI( )
  ]->
   [ St_I_5( I, id, R, kIR, kRI, x, y ) ]

  /* has exactly the trivial AC variant */

restriction UniqueLTKs:
  "∀ A B #i #j.
    ((KeyPair( A, B ) @ #i) ∧ (KeyPair( A, B ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma executable:
  exists-trace
  "∃ #i #j.
    ((((((FinishI( ) @ #i) ∧ (FinishR( ) @ #j)) ∧
        (¬(∃ A #j.1. Reveal( A ) @ #j.1))) ∧
       (∀ #j1 #j2 #j3.
         (((InitKey( ) @ #j1) ∧ (InitKey( ) @ #j2)) ∧ (InitKey( ) @ #j3)) ⇒
         (((#j1 = #j2) ∨ (#j1 = #j3)) ∨ (#j2 = #j3)))) ∧
      (∀ #j1 #j2.
        ((Init_I( ) @ #j1) ∧ (Init_I( ) @ #j2)) ⇒ (#j1 = #j2))) ∧
     (∀ #j1 #j2.
       ((Init_R( ) @ #j1) ∧ (Init_R( ) @ #j2)) ⇒ (#j1 = #j2))) ∧
    (∃ A B idA idB #i.1 #j.1.
      ((Create_I( A, idA ) @ #i.1) ∧ (Create_R( B, idB ) @ #j.1)) ∧
      (¬(A = B)))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j.
  (FinishI( ) @ #i) ∧ (FinishR( ) @ #j)
 ∧
  (∀ A #j.1. (Reveal( A ) @ #j.1) ⇒ ⊥) ∧
  (∀ #j1 #j2 #j3.
    (InitKey( ) @ #j1) ∧ (InitKey( ) @ #j2) ∧ (InitKey( ) @ #j3)
   ⇒
    ((#j1 = #j2) ∨ (#j1 = #j3) ∨ (#j2 = #j3))) ∧
  (∀ #j1 #j2. (Init_I( ) @ #j1) ∧ (Init_I( ) @ #j2) ⇒ #j1 = #j2) ∧
  (∀ #j1 #j2. (Init_R( ) @ #j1) ∧ (Init_R( ) @ #j2) ⇒ #j1 = #j2) ∧
  (∃ A B idA idB #i.1 #j.1.
    (Create_I( A, idA ) @ #i.1) ∧ (Create_R( B, idB ) @ #j.1)
   ∧
    ¬(A = B))"
*/
simplify
solve( St_I_4( I, id, R, kIR, kRI, x, y ) ▶₀ #i )
  case I_3
  solve( St_R_4( R, id.1, I, kIR, kRI, x.1, y.1 ) ▶₀ #j )
    case R_3
    solve( (#vr.3 = #vr.4)  ∥ (#vr.3 = #vr.8)  ∥ (#vr.4 = #vr.8) )
      case case_2
      solve( !KU( mac(<'R', ~x, y>, ~k.1) ) @ #vk )
        case R_4
        solve( !KU( ~x ) @ #vk.3 )
          case I_1
          solve( !KU( ~y ) @ #vk.2 )
            case R_2
            solve( !KU( mac(<'I', ~x, ~y>, ~k) ) @ #vk.3 )
              case I_3
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma attacker_can_be_R:
  exists-trace
  "∃ #i.
    ((FinishI( ) @ #i) ∧ (¬(∃ #i.1. Init_R( ) @ #i.1))) ∧
    (∀ #j1 #j2. ((Init_I( ) @ #j1) ∧ (Init_I( ) @ #j2)) ⇒ (#j1 = #j2))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i.
  (FinishI( ) @ #i)
 ∧
  (∀ #i.1. (Init_R( ) @ #i.1) ⇒ ⊥) ∧
  (∀ #j1 #j2. (Init_I( ) @ #j1) ∧ (Init_I( ) @ #j2) ⇒ #j1 = #j2)"
*/
simplify
solve( St_I_4( I, id, R, kIR, kRI, x, y ) ▶₀ #i )
  case I_3
  solve( !KU( mac(<'R', ~x, y>, ~k.1) ) @ #vk )
    case c_mac
    solve( !KU( ~k.1 ) @ #vk.4 )
      case Reveal_ltk
      solve( !KU( ~x ) @ #vk.6 )
        case I_1
        SOLVED // trace found
      qed
    qed
  qed
qed

lemma attacker_can_be_I:
  exists-trace
  "∃ #i.
    ((FinishR( ) @ #i) ∧ (¬(∃ #i.1. Init_I( ) @ #i.1))) ∧
    (∀ #j1 #j2. ((Init_R( ) @ #j1) ∧ (Init_R( ) @ #j2)) ⇒ (#j1 = #j2))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i.
  (FinishR( ) @ #i)
 ∧
  (∀ #i.1. (Init_I( ) @ #i.1) ⇒ ⊥) ∧
  (∀ #j1 #j2. (Init_R( ) @ #j1) ∧ (Init_R( ) @ #j2) ⇒ #j1 = #j2)"
*/
simplify
solve( St_R_4( R, id, I, kIR, kRI, x, y ) ▶₀ #i )
  case R_3
  solve( !KU( mac(<'I', x, ~y>, ~k) ) @ #vk )
    case c_mac
    solve( !KU( ~k ) @ #vk.4 )
      case Reveal_ltk
      solve( !KU( ~y ) @ #vk.6 )
        case R_2
        SOLVED // trace found
      qed
    qed
  qed
qed

lemma noninjectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4
  solve( St_I_4( a, id, b, kIR, kRI, x, y ) ▶₀ #i )
    case I_3
    solve( !KU( mac(<'R', ~x, y>, ~k.1) ) @ #vk )
      case R_4
      by contradiction /* from formulas */
    next
      case c_mac
      solve( !KU( ~k.1 ) @ #vk.4 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'I', 'R', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4
  solve( St_I_4( a, id, b, kIR, kRI, x, y ) ▶₀ #i )
    case I_3
    solve( !KU( mac(<'R', ~x, y>, ~k.1) ) @ #vk )
      case R_4
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( Commit( a2, b2, <'I', 'R', ~x, ~y> ) @ #i2 )
          case I_4
          solve( St_I_4( a2, id.1, b2, kIR, kRI, ~x, ~y ) ▶₀ #i2 )
            case I_3
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Commit( a2, b2, <'I', 'R', ~x, ~y> ) @ #i2 )
          case I_4
          solve( St_I_4( a2, id.1, b2, kIR, kRI, ~x, ~y ) ▶₀ #i2 )
            case I_3
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( ~k.1 ) @ #vk.4 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma noninjectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'R', 'I', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'R', 'I', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_4
  solve( St_R_4( a, id, b, kIR, kRI, x, y ) ▶₀ #i )
    case R_3
    solve( !KU( mac(<'I', x, ~y>, ~k) ) @ #vk )
      case I_3
      by contradiction /* from formulas */
    next
      case c_mac
      solve( !KU( ~k ) @ #vk.4 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'R', 'I', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_4
  solve( St_R_4( a, id, b, kIR, kRI, x, y ) ▶₀ #i )
    case R_3
    solve( !KU( mac(<'I', x, ~y>, ~k) ) @ #vk )
      case I_3
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( Commit( a2, b2, <'R', 'I', ~x, ~y> ) @ #i2 )
          case R_4
          solve( St_R_4( a2, id.1, b2, kIR, kRI, ~x, ~y ) ▶₀ #i2 )
            case R_3
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Commit( a2, b2, <'R', 'I', ~x, ~y> ) @ #i2 )
          case R_4
          solve( St_R_4( a2, id.1, b2, kIR, kRI, ~x, ~y ) ▶₀ #i2 )
            case R_3
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( ~k ) @ #vk.4 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end