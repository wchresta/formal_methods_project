theory P2 begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

rule (modulo E) SetupSymmetricKey:
   [ Fr( ~k ) ] --[ InitKey( ) ]-> [ !Ltk( $A, $B, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, B, k ) ] --[ Reveal( A ), Reveal( B ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_A:
   [ Fr( ~id ), !Ltk( I, R, ltkIR ), !Ltk( R, I, ltkRI ) ]
  --[
  Init_A( ), Create_A( I, ~id ), HasSharedKey( I, R, ltkIR, ltkRI )
  ]->
   [ St_A_1( I, ~id, R, ltkIR, ltkRI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_B:
   [ Fr( ~id ), !Ltk( I, R, ltkIR ), !Ltk( R, I, ltkRI ) ]
  --[
  Init_B( ), Create_B( R, ~id ), HasSharedKey( R, I, ltkIR, ltkRI )
  ]->
   [ St_B_1( R, ~id, I, ltkIR, ltkRI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_1:
   [ St_A_1( I, id, R, ltkIR, ltkRI ), Fr( ~x ) ]
  --[ Running( R, I, <'I', 'R', ~x> ), Honest( I ) ]->
   [ St_A_2( I, id, R, ltkIR, ltkRI, ~x ), Out( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_1:
   [ St_B_1( R, id, I, ltkIR, ltkRI ), In( x ) ]
  --[ Receive( R, x ) ]->
   [ St_B_2( R, id, I, ltkIR, ltkRI, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_2:
   [ St_B_2( R, id, I, ltkIR, ltkRI, x ), Fr( ~y ) ]
  --[ Running( I, R, <'R', 'I', ~y> ), Send( R, ~y ) ]->
   [ St_B_3( R, id, I, ltkIR, ltkRI, x, ~y ), Out( ~y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_2:
   [ St_A_2( I, id, R, ltkIR, ltkRI, x ), In( y ) ]
  --[ Receive( I, y ) ]->
   [ St_A_3( I, id, R, ltkIR, ltkRI, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_3:
   [ St_A_3( I, id, R, ltkIR, ltkRI, x, y ) ]
  --[ Send( I, sign(y, ltkIR) ) ]->
   [ St_A_4( I, id, R, ltkIR, ltkRI, x, y ), Out( sign(y, ltkIR) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_3:
   [ St_B_3( R, id, I, ltkIR, ltkRI, x, y ), In( sign(y, ltkIR) ) ]
  --[ Receive( R, sign(y, ltkIR) ) ]->
   [ St_B_4( R, id, I, ltkIR, ltkRI, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_4:
   [ St_B_4( R, id, I, ltkIR, ltkRI, x, y ) ]
  --[
  Send( R, sign(x, ltkRI) ), Commit( R, I, <'R', 'I', y> ),
  Honest( R ), FinishR( )
  ]->
   [ St_B_5( R, id, I, ltkIR, ltkIR, x, y ), Out( sign(x, ltkRI) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_4:
   [ St_A_4( I, id, R, ltkIR, ltkRI, x, y ), In( sign(x, ltkRI) ) ]
  --[
  Receive( I, sign(x, ltkRI) ), Commit( I, R, <'I', 'R', x> ),
  Honest( I ), FinishI( )
  ]->
   [ St_A_5( I, id, R, ltkIR, ltkRI, x, y ) ]

  /* has exactly the trivial AC variant */

lemma executable:
  exists-trace
  "∃ #i #j.
    (((((FinishI( ) @ #i) ∧ (FinishR( ) @ #j)) ∧
       (¬(∃ A #j.1. Reveal( A ) @ #j.1))) ∧
      (∀ #j1 #j2 #j3.
        (((InitKey( ) @ #j1) ∧ (InitKey( ) @ #j2)) ∧ (InitKey( ) @ #j3)) ⇒
        (((#j1 = #j2) ∨ (#j1 = #j3)) ∨ (#j2 = #j3)))) ∧
     (∀ #j1 #j2.
       ((Init_A( ) @ #j1) ∧ (Init_A( ) @ #j2)) ⇒ (#j1 = #j2))) ∧
    (∀ #j1 #j2. ((Init_B( ) @ #j1) ∧ (Init_B( ) @ #j2)) ⇒ (#j1 = #j2))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j.
  (FinishI( ) @ #i) ∧ (FinishR( ) @ #j)
 ∧
  (∀ A #j.1. (Reveal( A ) @ #j.1) ⇒ ⊥) ∧
  (∀ #j1 #j2 #j3.
    (InitKey( ) @ #j1) ∧ (InitKey( ) @ #j2) ∧ (InitKey( ) @ #j3)
   ⇒
    ((#j1 = #j2) ∨ (#j1 = #j3) ∨ (#j2 = #j3))) ∧
  (∀ #j1 #j2. (Init_A( ) @ #j1) ∧ (Init_A( ) @ #j2) ⇒ #j1 = #j2) ∧
  (∀ #j1 #j2. (Init_B( ) @ #j1) ∧ (Init_B( ) @ #j2) ⇒ #j1 = #j2)"
*/
simplify
solve( St_A_4( I, id, R, ltkIR, ltkRI, x, y ) ▶₀ #i )
  case I_3
  solve( St_B_4( R, id.1, I, ltkIR, ltkRI, x.1, y.1 ) ▶₀ #j )
    case R_3
    solve( (#vr.4 = #vr.5)  ∥ (#vr.4 = #vr.10)  ∥ (#vr.5 = #vr.10) )
      case case_1
      solve( (#vr.4 = #vr.9)  ∥ (#vr.4 = #vr.10)  ∥ (#vr.9 = #vr.10) )
        case case_1
        solve( !KU( sign(~x, ~k) ) @ #vk )
          case R_4
          solve( !KU( sign(~y.1, ~k) ) @ #vk.2 )
            case I_3
            solve( !KU( ~x ) @ #vk.3 )
              case I_1
              solve( !KU( ~y ) @ #vk.3 )
                case R_2
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4
  solve( St_A_4( a, id, b, ltkIR, ltkRI, t, y ) ▶₀ #i )
    case I_3
    by contradiction /* from formulas */
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'I', 'R', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4
  solve( St_A_4( a, id, b, ltkIR, ltkRI, t, y ) ▶₀ #i )
    case I_3
    solve( (#i2 < #i)  ∥ (#i < #i2) )
      case case_1
      solve( Commit( a2, b2, <'I', 'R', ~x> ) @ #i2 )
        case I_4
        solve( St_A_4( a2, id.1, b2, ltkIR, ltkRI, ~x, y.1 ) ▶₀ #i2 )
          case I_3
          by contradiction /* cyclic */
        qed
      qed
    next
      case case_2
      solve( Commit( a2, b2, <'I', 'R', ~x> ) @ #i2 )
        case I_4
        solve( St_A_4( a2, id.1, b2, ltkIR, ltkRI, ~x, y.1 ) ▶₀ #i2 )
          case I_3
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'R', 'I', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'R', 'I', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_4
  solve( St_B_4( a, id, b, ltkIR, ltkRI, x, t ) ▶₀ #i )
    case R_3
    by contradiction /* from formulas */
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'R', 'I', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_4
  solve( St_B_4( a, id, b, ltkIR, ltkRI, x, t ) ▶₀ #i )
    case R_3
    solve( (#i2 < #i)  ∥ (#i < #i2) )
      case case_1
      solve( Commit( a2, b2, <'R', 'I', ~y> ) @ #i2 )
        case R_4
        solve( St_B_4( a2, id.1, b2, ltkIR, ltkRI, x.1, ~y ) ▶₀ #i2 )
          case R_3
          by contradiction /* cyclic */
        qed
      qed
    next
      case case_2
      solve( Commit( a2, b2, <'R', 'I', ~y> ) @ #i2 )
        case R_4
        solve( St_B_4( a2, id.1, b2, ltkIR, ltkRI, x.1, ~y ) ▶₀ #i2 )
          case R_3
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end