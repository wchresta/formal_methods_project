theory OTR2
begin

builtins: asymmetric-encryption, signing, diffie-hellman

// Set up symmetric keys
rule Register_pk:
  [ Fr(~ltkA) ] 
--[ CreateKey($A) ]->
  [ !Ltk($A, ~ltkA)
  , !Pk($A, pk(~ltkA))
  , Out(pk(~ltkA)) 
  ]

rule Reveal_ltk:
  [ !Ltk(A, ltkA) ] --[ Reveal(A) ]-> [ Out(ltkA) ]

/*
  We model the following protocol from section 2.1
  This is based on diffie-hellman

  1. A -> B: <{g^~x}_{ltkA}, pk(ltkA)>
  2. A <- B: <{g^~y}_{ltkB}, pk(ltkB)>

  Where {.}_{ltkA} is signing and pk(ltkA) is the 
  public key of A. The ~x and ~y are secret fresh
  values and g is a shared public value (not
  necessarily fresh).
 */

rule Init_A:
  [ Fr(~id)
  , !Pk(A, pk(~ltkA)) // Own private key
  , !Pk(B, pkLtkB)    // Pinned public key of B
  ]
--[ Init_A()
  , InitI(A,B)
  , NotEq(A,B)
  ]->
  [ St_A_1(A, ~id, B, ~ltkA, pkLtkB)
  ]

rule Init_B:
  [ Fr(~id)
  , !Pk(B, pk(~ltkB)) // Own private key
  , !Pk(A, pkLtkA)  // Pinned public key of A
  ]
--[ Init_B()
  , InitR(B,A)
  , NotEq(A,B)
  ]->
  [ St_B_1(B, ~id, A, ~ltkB, pkLtkA)
  ]


// 1. A -> B: <{g^~x}_{ltkA}, pk(ltkA)>

rule I_1:
  let X = 'g'^~x
      Xs = sign(X,ltkA)
      m = <X,Xs,pk(ltkA)>
  in
  [ St_A_1(A, id, B, ltkA, pkLtkB)
  , Fr(~x)
  ]
--[ Send(A,m)
  ]->
  [ St_A_2(A, id, B, ltkA, pkLtkB, ~x)
  , Out(m)
  , Secret(A,~x)
  , Honest(A)
  ]

rule R_1:
  let m = <X,signXltkA,pkLtkA>
      verif = verify(signXltkA,X,pkLtkA)
  in
  [ St_B_1(B, id, A, ltkB, pkLtkA)
  , In(m)
  ]
--[ Receive(B,m)
  , IsTrue(verif) // Check signature
  ]->
  [ St_B_2(B, id, A, ltkB, pkLtkA, X)
  ]

// 2. A <- B: <{g^~y}_{ltkB}, pk(ltkB)>
rule R_2:
  let Y = 'g'^~y
      K = X^~y
      m = <Y,sign(Y,ltkB),pk(ltkB)>
  in
  [ St_B_2(B, id, A, ltkB, pkLtkA, X)
  , Fr(~y)
  ]
--[ Send(B,m)
  , AgreeOnKeyR(B,A,K)
  , FinishR()
  , Secret(B,~y)
  , Secret(B,K)
  , Honest(B)
  , Honest(A) // To keep K secret, A must be honest, too 
  ]->
  [ St_B_3(B, id, A, ltkB, pkLtkA, K) // Remove X,Y,x,y
  , Out(m)
  ]

rule I_2:
  let m = <Y,signYltkB,pkLtkB>
      K = Y^x
      verif = verify(signYltkB,Y,pkLtkB)
  in
  [ St_A_2(A, id, B, ltkA, pkLtkB, x)
  , In(m)
  ]
--[ Receive(A,m)
  , AgreeOnKeyI(A,B,K)
  , Honest(A)
  , Honest(B)
  , FinishI()
  , IsTrue(verif) // Check signature
  , Secret(A,K)
  ]->
  [ St_A_3(A, id, B, ltkA, pkLtkB, K) // Remove X,Y,x,y
  ]

// Force IsTrue to hold everywhere
restriction IsTrueMustHold:
    "All x #i. IsTrue(x)@i ==> x=true"

restriction NotEqMustHold:
    "All x y #i. NotEq(x,y)@i ==> not x = y"

lemma findAttack: // proven
  exists-trace
    "Ex #i #j. FinishI()@i & FinishR()@j
   & (Ex A B C #i1 #i2 #j1 #j2 #k1 K. 
            InitI(A,B)@i1 & InitR(B,C)@i2 & not A=B & not A=C & not B=C & Reveal(C)@k1
          & AgreeOnKeyI(A,B,K)@j1 & AgreeOnKeyR(B,C,K)@j2
     )
   & (All #i #j C. Reveal(C)@i & Reveal(C)@j ==> #i = #j)
   & (All #i #j. Init_A()@i & Init_A()@j ==> #i = #j)
   & (All #i #j. Init_B()@i & Init_B()@j ==> #i = #j)
   & (All #i #j. FinishI()@i & FinishI()@j ==> #i = #j)
   & (All #i #j. FinishR()@i & FinishR()@j ==> #i = #j)
   & (All A #i #j. CreateKey(A)@i & CreateKey(A)@j ==> #i = #j)
    "

end
