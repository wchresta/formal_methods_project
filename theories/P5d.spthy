theory P5d
begin

builtins: hashing, symmetric-encryption, diffie-hellman

// Set up symmetric keys
rule SetupSymmetricKey:
  [ Fr(~k) ] --[ InitKey() ]-> [ !Ltk($A, $B, ~k) ]

rule Reveal_ltk:
  [ !Ltk(A, B, k) ] --[ Reveal(A), Reveal(B) ]-> [ Out(k) ]
  
// user-defined function
functions:
  mac/2,
  map/2

/*
  We model the following protocol

  1. A -> B: g^x, enc{s}_{h(K(A,B))}
  2. A <- B: g^y
  3. A -> B: {<A,g^y>}_{k}
  4. A <- B: {<B,g^x>}_{k}
 */

rule Init_A:
  [ Fr(~id)
  , !Ltk(I, R, ltkIR)
  , !Ltk(R, I, ltkRI)
  ]
--[ Init_A()
  , Create_A(I, ~id) 
  ]->
  [ St_A_1( I, ~id, R, ltkIR, ltkRI )
  ]

rule Init_B:
  [ Fr(~id)
  , !Ltk(I, R, ltkIR)
  , !Ltk(R, I, ltkRI)
  ]
--[ Init_B()
  , Create_B(R, ~id)
  ]->
  [ St_B_1( R, ~id, I, ltkIR, ltkRI )
  ]

// 1. A -> B: g^x, {s}_{h(K(A,B))}

rule I_1:
  let g  = map( ~s, ~p )
      m  = senc( ~s, h(ltkIR) )
      gx = g^(~x)
  in
  [ St_A_1( I, id, R, ltkIR, ltkRI )
  , Fr( ~x )
  , Fr( ~s )
  , Fr( ~p )
  ]
--[ Send( I, <gx,m,~p> ) 
  ]->
  [ St_A_2( I, id, R, ltkIR, ltkRI, ~p, ~x, ~s )
  , Out( <gx,m,~p> )
  ]
  
rule R_1:
  let g  = map( s, p )
      m  = senc( s, h(ltkIR) )
      s  = sdec( m, h(ltkIR) )
  in
  [ St_B_1( R, id, I, ltkIR, ltkRI )
  , In( <gx, m, p> )
  ]
--[ Receive( R, <gx,m,p> )
  ]->
  [ St_B_2( R, id, I, ltkIR, ltkRI, p, gx, s )
  ]
  
// 2. A <- B: g^y

rule R_2:
  let g  = map( s, p )
      gy = g^(~y)
  in
  [ St_B_2( R, id, I, ltkIR, ltkRI, p, gx, s )
  , Fr( ~y )
  ]
--[ Send( R, gy )
  , Honest(R)
  ]->
  [ St_B_3( R, id, I, ltkIR, ltkRI, p, gx, s, ~y )
  , Out( gy )
  ]
  
rule I_2:
  let g  = map( s, p )
  in
  [ St_A_2( I, id, R, ltkIR, ltkRI, p, x, s )
  , In( gy )
  ]
--[ Receive( I, gy )
  , Honest(I)
  ]->
  [ St_A_3( I, id, R, ltkIR, ltkRI, p, x, s, gy )
  ]

// 3. A -> B: {g^y}_{k}

rule I_3:
  let k  = h( gy^x )
      m  = mac( gy, k )
      g  = map( s, p )
      gx = g^x
  in
  [ St_A_3( I, id, R, ltkIR, ltkRI, p, x, s, gy )
  ]
--[ Send( I, m )
  , Running( I, R, <'R', 'I', k, gy, gx> )
  ]->
  [ St_A_4( I, id, R, ltkIR, ltkRI, p, x, s, gy, gx, k )
  , Out( m )
  ]

rule R_3:
  let k  = h( (gx)^(y) )
      g  = map( s, p )
      gy = g^y
      m  = mac( gy, k )
  in
  [ St_B_3( R, id, I, ltkIR, ltkRI, p, gx, s, y )
  , In( m )
  ]
--[ Receive( R, m )
  , Running( R, I, <'I', 'R', k, gy, gx> )
  ]->
  [ St_B_4( R, id, I, ltkIR, ltkRI, p, gx, s, y, k, gy )
  ]

// 4. A <- B: {g^x}_{k}

rule R_4:
  let m  = mac( gx, k )
  in
  [ St_B_4( R, id, I, ltkIR, ltkRI, p, gx, s, y, k, gy )
  ]
--[ Send( R, m )
  , Commit( R, I, <'R', 'I', k, gy, gx> )
  , Secret( R, k )
  , Honest( R )
  , Honest( I )
  , FinishR()
  ]->
  [ St_B_5( R, id, I, ltkIR, ltkRI, p, gx, s, y, k, gy )
  , Out( m )
  ]

rule I_4:
  let m  = mac( gx, k )
  in
  [ St_A_4( I, id, R, ltkIR, ltkRI, p, x, s, gy, gx, k )
  , In( m )
  ]
--[ Receive( I, m )
  , Secret( I, k )
  , Commit( I, R, <'I', 'R', k, gy, gx> )
  , Honest( I )
  , Honest( R )
  , FinishI()
  ]->
  [ St_A_5( I, id, R, ltkIR, ltkRI, p, x, s, gy, gx, k )
  ]
  

// Own lemma
lemma executable:
  exists-trace
    "Ex #i #j. FinishI()@i & FinishR()@j 
   & not (Ex A #j. Reveal(A)@j)
   & (All #j1 #j2 #j3. InitKey()@j1 & InitKey()@j2 & InitKey()@j3 
          ==> #j1 = #j2 | #j1 = #j3 | #j2 = #j3)
   & (All #j1 #j2. Init_A()@j1 & Init_A()@j2 ==> #j1 = #j2)
   & (All #j1 #j2. Init_B()@j1 & Init_B()@j2 ==> #j1 = #j2)
   & (Ex A B idA idB #i #j. Create_A(A,idA)@i & Create_B(B,idB)@j & not A=B)
   "


// Given, immutable lemmas

lemma secrecy:
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma secrecy_PFS:
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i & r < i)"


lemma noninjectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j 
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"


lemma noninjectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j 
              & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2
                                 & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

end
