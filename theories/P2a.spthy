theory P2a
begin

functions: mac/2

// Set up symmetric keys
rule SetupSymmetricKey:
  [ Fr(~k) ] --[ InitKey(), KeyPair($A,$B) ]-> [ !Ltk($A, $B, ~k) ]

rule Reveal_ltk:
  [ !Ltk(A, B, k) ] --[ Reveal(A), Reveal(B) ]-> [ Out(k) ]

/*
  We model the following protocol

  1. A -> B: x
  2. A <- B: y
  3. A -> B: {y}_{k(A,B)}
  4. A <- B: {x}_{k(B,A)}
 */

rule Init_I:
  [ Fr(~id)
  , !Ltk(I, R, kIR)
  , !Ltk(R, I, kRI)
  ]
--[ Init_I()
  , Create_I(I, ~id) 
  ]->
  [ St_I_1(I, ~id, R, kIR, kRI)
  ]

rule Init_R:
  [ Fr(~id)
  , !Ltk(I, R, kIR)
  , !Ltk(R, I, kRI)
  ]
--[ Init_R()
  , Create_R(R, ~id)
  ]->
  [ St_R_1(R, ~id, I, kIR, kRI)
  ]

// A -> B : x

rule I_1:
  [ St_I_1(I, id, R, kIR, kRI)
  , Fr(~x)
  ]
--[ Send(I,~x)
  ]->
  [ St_I_2(I, id, R, kIR, kRI, ~x)
  , Out(~x)
  ]

rule R_1:
  [ St_R_1(R, id, I, kIR, kRI)
  , In(x)
  ]
--[ Receive(R, x) 
  ]->
  [ St_R_2(R, id, I, kIR, kRI, x)
  ]

// A <- B : y

rule R_2:
  [ St_R_2(R, id, I, kIR, kRI, x)
  , Fr(~y)
  ]
--[ Send(R,~y)
  , Running(R,I, <'I','R',x,~y>)
  ]->
  [ St_R_3(R, id, I, kIR, kRI, x, ~y)
  , Out(~y)
  ]

rule I_2:
  [ St_I_2(I, id, R, kIR, kRI, x)
  , In(y)
  ]
--[ Receive(I, y) 
  , Running(I,R, <'R','I',x,y>)
  ]->
  [ St_I_3(I, id, R, kIR, kRI, x, y)
  ]

// A -> B : [y]_k(A,B)

rule I_3:
  let m = mac{y}kIR
  in
  [ St_I_3(I, id, R, kIR, kRI, x, y)
  ]
--[ Send(I,m)
  ]->
  [ St_I_4(I, id, R, kIR, kRI, x, y)
  , Out(m)
  ]

rule R_3:
  let m = mac{y}kIR
  in
  [ St_R_3(R, id, I, kIR, kRI, x, y)
  , In(m)
  ]
--[ Receive(R,m)
  ]->
  [ St_R_4(R, id, I, kIR, kRI, x, y)
  ]

// A <- B : [x]_k(B,A)

rule R_4:
  let m = mac{x}kRI
  in 
  [ St_R_4(R, id, I, kIR, kRI, x, y)
  ]
--[ Send(R, m)
  , Commit(R,I,<'R','I',x,y>)
  , Honest(I)
  , Honest(R)
  , FinishR()
  ]->
  [ St_R_5(R, id, I, kIR, kIR, x, y)
  , Out(m)
  ]

rule I_4:
  let m = mac{x}kRI
  in
  [ St_I_4(I, id, R, kIR, kRI, x, y)
  , In(m)
  ]
--[ Receive(I, m)
  , Commit(I,R,<'I','R',x,y>) 
  , Honest(I)
  , Honest(R)
  , FinishI()
  ]->
  [ St_I_5(I, id, R, kIR, kRI, x, y)
  ]

restriction UniqueLTKs:
  "All A B #i #j. KeyPair(A,B)@i & KeyPair(A,B)@j ==> #i=#j"
  

// Own lemma
lemma executable: // verified
  exists-trace
    "Ex #i #j. FinishI()@i & FinishR()@j 
   & not (Ex A #j. Reveal(A)@j)
   & (All #j1 #j2 #j3. InitKey()@j1 & InitKey()@j2 & InitKey()@j3 
          ==> #j1 = #j2 | #j1 = #j3 | #j2 = #j3) 
   & (All #j1 #j2. Init_I()@j1 & Init_I()@j2 ==> #j1 = #j2)
   & (All #j1 #j2. Init_R()@j1 & Init_R()@j2 ==> #j1 = #j2)
   & (Ex A B idA idB #i #j. Create_I(A,idA)@i & Create_R(B,idB)@j & not A=B)
   "

// Ensure attacker can act as R
lemma attacker_can_be_R: // verified
  exists-trace
    "Ex #i. FinishI()@i
   & not (Ex #i. Init_R()@i)
   & (All #j1 #j2. Init_I()@j1 & Init_I()@j2 ==> #j1 = #j2)
   "

// Ensure attacker can act as I
lemma attacker_can_be_I: // verified
  exists-trace
    "Ex #i. FinishR()@i
   & not (Ex #i. Init_I()@i)
   & (All #j1 #j2. Init_R()@j1 & Init_R()@j2 ==> #j1 = #j2)
   "
   



// Given, immutable lemmas
/*
lemma secrecy:
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma secrecy_PFS:
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i & r < i)"
*/

lemma noninjectiveagreementINITIATOR: // disproved
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementINITIATOR: // disproved
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j 
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"


lemma noninjectiveagreementRESPONDER: //disproved
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementRESPONDER: //disproved
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j 
              & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2
                                 & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

end
